// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenLibraryLabelImg.Data;

namespace OpenLibraryLabelImg.Migrations
{
    [DbContext(typeof(AnnotationContext))]
    partial class AnnotationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("AnnotationClassAnnotationCollection", b =>
                {
                    b.Property<int>("ClassesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CollectionsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassesId", "CollectionsId");

                    b.HasIndex("CollectionsId");

                    b.ToTable("AnnotationClassAnnotationCollection");
                });

            modelBuilder.Entity("AnnotationCollectionYoloNet", b =>
                {
                    b.Property<int>("CollectionsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NetsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CollectionsId", "NetsId");

                    b.HasIndex("NetsId");

                    b.ToTable("AnnotationCollectionYoloNet");
                });

            modelBuilder.Entity("OpenLibraryLabelImg.Model.AnnotationBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnnotaionImageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AnnotaionImageId");

                    b.HasIndex("ClassId");

                    b.ToTable("AnnotationBox");
                });

            modelBuilder.Entity("OpenLibraryLabelImg.Model.AnnotationClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClassLabel")
                        .HasColumnType("TEXT");

                    b.Property<int>("ColorArgb")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClassLabel")
                        .IsUnique();

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("OpenLibraryLabelImg.Model.AnnotationCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BasePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("OpenLibraryLabelImg.Model.AnnotationImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AnnotationCollectionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Excluded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AnnotationCollectionId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("OpenLibraryLabelImg.Model.ClassMap", b =>
                {
                    b.Property<int>("AnnotationClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MappedId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("YoloNetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnnotationClassId", "MappedId");

                    b.HasIndex("YoloNetId");

                    b.ToTable("ClassMap");
                });

            modelBuilder.Entity("OpenLibraryLabelImg.Model.YoloNet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataFolderPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObjFilePath")
                        .HasColumnType("TEXT");

                    b.Property<int>("TargetXResolution")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetYResolution")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("WeightFolderPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("YoloFilePath")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Nets");
                });

            modelBuilder.Entity("AnnotationClassAnnotationCollection", b =>
                {
                    b.HasOne("OpenLibraryLabelImg.Model.AnnotationClass", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLibraryLabelImg.Model.AnnotationCollection", null)
                        .WithMany()
                        .HasForeignKey("CollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnnotationCollectionYoloNet", b =>
                {
                    b.HasOne("OpenLibraryLabelImg.Model.AnnotationCollection", null)
                        .WithMany()
                        .HasForeignKey("CollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLibraryLabelImg.Model.YoloNet", null)
                        .WithMany()
                        .HasForeignKey("NetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenLibraryLabelImg.Model.AnnotationBox", b =>
                {
                    b.HasOne("OpenLibraryLabelImg.Model.AnnotationImage", "AnnotaionImage")
                        .WithMany("Boxes")
                        .HasForeignKey("AnnotaionImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLibraryLabelImg.Model.AnnotationClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnotaionImage");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("OpenLibraryLabelImg.Model.AnnotationImage", b =>
                {
                    b.HasOne("OpenLibraryLabelImg.Model.AnnotationCollection", null)
                        .WithMany("Images")
                        .HasForeignKey("AnnotationCollectionId");
                });

            modelBuilder.Entity("OpenLibraryLabelImg.Model.ClassMap", b =>
                {
                    b.HasOne("OpenLibraryLabelImg.Model.AnnotationClass", "AnnotationClass")
                        .WithMany()
                        .HasForeignKey("AnnotationClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenLibraryLabelImg.Model.YoloNet", null)
                        .WithMany("ClassMapping")
                        .HasForeignKey("YoloNetId");

                    b.Navigation("AnnotationClass");
                });

            modelBuilder.Entity("OpenLibraryLabelImg.Model.AnnotationCollection", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("OpenLibraryLabelImg.Model.AnnotationImage", b =>
                {
                    b.Navigation("Boxes");
                });

            modelBuilder.Entity("OpenLibraryLabelImg.Model.YoloNet", b =>
                {
                    b.Navigation("ClassMapping");
                });
#pragma warning restore 612, 618
        }
    }
}
